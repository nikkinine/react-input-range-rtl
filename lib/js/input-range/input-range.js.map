{"version":3,"sources":["../../../src/js/input-range/input-range.jsx"],"names":["valueTransformer","InputRange","ariaLabelledby","string","ariaControls","classNames","objectOf","direction","oneOf","isRequired","disabled","bool","draggableTrack","formatLabel","func","maxValue","minValue","name","onChangeStart","onChange","onChangeComplete","step","number","value","props","startValue","node","trackNode","isSliderDragging","removeDocumentMouseUpListener","removeDocumentTouchEndListener","isRTL","inputRange","rtlInputRange","disabledInputRange","getClientRect","position","values","getValueFromProps","isMultiValue","positions","getPositionsFromValues","getTrackClientRect","distanceToMin","min","distanceToMax","max","currentValues","isWithinRange","hasStepDifference","key","updatePositions","getValueFromPosition","transformedValues","getStepValueFromValue","updateValues","shouldUpdate","updateValue","ownerDocument","addEventListener","handleMouseUp","handleTouchEnd","removeEventListener","event","getPositionFromEvent","requestAnimationFrame","updatePosition","prevEvent","stepValue","prevPosition","prevValue","prevStepValue","offset","keyCode","preventDefault","incrementValue","decrementValue","getKeyByPosition","handleInteractionStart","handleInteractionEnd","addDocumentMouseUpListener","addDocumentTouchEndListener","percentages","getPercentagesFromValues","getKeys","map","percentage","slider","handleSliderDrag","handleSliderKeyDown","componentClassName","getComponentClassName","handleKeyDown","handleKeyUp","handleMouseDown","handleTouchStart","handleTrackDrag","handleTrackMouseDown","renderSliders","renderHiddenInputs","Component"],"mappings":"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","file":"input-range.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      direction: PropTypes.oneOf(['ltr', 'rtl']).isRequired,\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType,\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      classNames: DEFAULT_CLASS_NAMES,\n      direction: 'ltr',\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      if (this.isRTL()) {\n        return `${this.props.classNames.inputRange} ${this.props.classNames.rtlInputRange}`;\n      }\n\n      return this.props.classNames.inputRange;\n    }\n\n    if (this.isRTL()) {\n      return `${this.props.classNames.disabledInputRange} ${this.props.classNames.rtlInputRange}`;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    return this.trackNode.getClientRect();\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    return length(values.min, currentValues.min) >= this.props.step ||\n           length(values.max, currentValues.max) >= this.props.step;\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  /**\n   * Return true if the direction is from right to left\n   * @private\n   * @return {boolean}\n   */\n  isRTL() {\n    return this.props.direction === 'rtl';\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n             values.max <= this.props.maxValue &&\n             values.min < values.max;\n    }\n\n    return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    positions[key] = position;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n      max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n      max: valueTransformer.getStepValueFromValue(values.max, this.props.step),\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect(), this.isRTL());\n    this.isSliderDragging = true;\n\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    const prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n    const prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n    const prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset,\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n    case LEFT_ARROW:\n      event.preventDefault();\n      if (this.isRTL()) {\n        this.incrementValue(key);\n      } else {\n        this.decrementValue(key);\n      }\n      break;\n\n    case RIGHT_ARROW:\n      event.preventDefault();\n      if (this.isRTL()) {\n        this.decrementValue(key);\n      } else {\n        this.incrementValue(key);\n      }\n      break;\n\n    case DOWN_ARROW:\n      event.preventDefault();\n      this.decrementValue(key);\n      break;\n\n\n    case UP_ARROW:\n      event.preventDefault();\n      this.incrementValue(key);\n      break;\n\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(\n      values,\n      this.props.minValue,\n      this.props.maxValue,\n      this.isRTL(),\n    );\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value} />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const name = isMultiValue ? `${this.props.name}${captialize(key)}` : this.props.name;\n\n      return (\n        <input key={key} type=\"hidden\" name={name} value={value} />\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={(node) => { this.node = node; }}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\">\n          {this.props.minValue}\n        </Label>\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          isRTL={this.isRTL()}\n          ref={(trackNode) => { this.trackNode = trackNode; }}\n          percentages={percentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}>\n\n          {this.renderSliders()}\n        </Track>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\">\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n"]}